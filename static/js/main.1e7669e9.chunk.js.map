{"version":3,"sources":["api.ts","types/FilterTypes.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterType","TodoList","todos","selectedModal","onSelectedModal","className","map","todo","id","title","completed","classNames","type","onClick","TodoFilter","query","onQueryChange","selectedType","onSelectedType","value","onChange","event","target","Object","values","filterType","placeholder","style","pointerEvents","Loader","TodoModal","useState","user","setUser","isLoding","setIsLoading","hasLoadingModalError","setHasLoadingModalError","useEffect","userId","catch","finally","href","email","name","App","setTodos","setQuery","selectedTodo","setSelectedTodo","isLoading","ALL","setSelectedType","hasError","setHasError","visibleTodos","ACTIVE","filter","COMPLETED","toLowerCase","includes","getVisibleTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1e7669e9.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterType {\n  ALL = 'all',\n  COMPLETED = 'completed',\n  ACTIVE = 'active',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedModal: Todo | null\n  onSelectedModal: (todo: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedModal,\n  onSelectedModal,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => {\n          const {\n            id,\n            title,\n            completed,\n          } = todo;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              key={id}\n            >\n              <td className=\"is-vcentered\">\n                {id}\n              </td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames(\n                  {\n                    'has-text-success': completed,\n                    'has-text-danger': !completed,\n                  },\n                )}\n                >\n                  {title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onSelectedModal(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames('far', {\n                      'fa-eye': !selectedModal,\n                      'fa-eye-slash': selectedModal,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport { FilterType } from '../../types/FilterTypes';\nimport './TodoFilter.scss';\n\ntype Props = {\n  query: string;\n  onQueryChange: (query: string) => void;\n  selectedType: string;\n  onSelectedType: (filter: FilterType) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onQueryChange,\n  selectedType,\n  onSelectedType,\n}) => {\n  const handleQuery = (event: ChangeEvent<HTMLInputElement>) => {\n    onQueryChange(event.target.value);\n  };\n\n  const resetQuery = () => {\n    onQueryChange('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            className=\"select-type\"\n            data-cy=\"statusSelect\"\n            value={selectedType}\n            onChange={event => {\n              const target = event.target.value;\n\n              return (\n                onSelectedType(target as FilterType)\n              );\n            }}\n          >\n            {Object.values(FilterType).map((filterType) => (\n              <option key={filterType} value={filterType}>{filterType}</option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              aria-label=\"Mute volume\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={resetQuery}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedModal: Todo\n  onSelectedModal: (todo: Todo | null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedModal,\n  onSelectedModal,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoding, setIsLoading] = useState(true);\n  const [hasLoadingModalError, setHasLoadingModalError] = useState(false);\n\n  useEffect(() => {\n    getUser(selectedModal.userId)\n      .then(setUser)\n      .catch(() => setHasLoadingModalError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const { id, completed } = selectedModal;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoding && (\n        <Loader />\n      )}\n\n      {!isLoding && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              aria-label=\"Mute volume\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onSelectedModal(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedModal.title}\n            </p>\n\n            {hasLoadingModalError\n              ? (\n                <div className=\"notification is-danger\">\n                  An error occured when loading data!\n                </div>\n              )\n              : (\n                <p className=\"block\" data-cy=\"modal-user\">\n                  <strong className={classNames({\n                    'has-text-success': completed,\n                    'has-text-danger': !completed,\n                  })}\n                  >\n                    {selectedModal.completed\n                      ? 'Done'\n                      : 'Planned'}\n                  </strong>\n\n                  {' by '}\n\n                  <a href={`mailto:${user?.email}`}>\n                    {user?.name}\n                  </a>\n                </p>\n              )}\n          </div>\n        </div>\n      )}\n\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { FilterType } from './types/FilterTypes';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nconst getVisibleTodos = (\n  todos: Todo[],\n  filterType: string,\n  query: string,\n): Todo[] => {\n  let visibleTodos: Todo[] = [...todos];\n\n  switch (filterType) {\n    case FilterType.ACTIVE:\n      visibleTodos = visibleTodos.filter(todo => !todo.completed);\n      break;\n\n    case FilterType.COMPLETED:\n      visibleTodos = visibleTodos.filter(todo => todo.completed);\n      break;\n\n    default:\n      break;\n  }\n\n  return visibleTodos.filter(\n    todo => todo.title.toLowerCase().includes(\n      query.toLowerCase(),\n    ),\n  );\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedType, setSelectedType] = useState(FilterType.ALL);\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .catch(() => setHasError(true))\n      .finally(() => setIsLoading(true));\n  }, []);\n\n  const visibleTodos = getVisibleTodos(todos, selectedType, query);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              {isLoading && !hasError && (\n                <TodoFilter\n                  query={query}\n                  onQueryChange={setQuery}\n                  selectedType={selectedType}\n                  onSelectedType={setSelectedType}\n                />\n              )}\n\n            </div>\n\n            {hasError && (\n              <div className=\"notification is-danger\">\n                An error occured when loading data!\n              </div>\n            )}\n\n            <div className=\"block\">\n              {isLoading\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedModal={selectedTodo}\n                    onSelectedModal={setSelectedTodo}\n                  />\n                )\n                : (\n                  <Loader />\n                )}\n            </div>\n\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedModal={selectedTodo}\n          onSelectedModal={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}